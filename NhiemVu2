#include <Leanbot.h>
#include <Servo.h>
#include <Arduino_APDS9960.h>

const int time_delay = 200;
const int threshold = 50;
const int TRANSFER_DISTANCE = 200;
const int DISTANCE_THRESHOLD = 50; // Ngưỡng phát hiện vật thể
const int speed_turn = 600;
const int speed_go = 800;
const int time_angle_unit = 500;

// === HÀM TIỆN ÍCH === //
void followLine(int speed) {
    int speed_3 = 0.6 * speed;
    int speed_2 = 0.4 * speed;
    int speed_0 = 0.0 * speed;

    byte line = LbIRLine.read(threshold);
    LbIRLine.print(line);

    switch (line) {
        case 0b0000: LbMotion.stopAndWait(); LbMotion.runLR(speed_3, speed_3); LbDelay(100); break;
        case 0b0110: LbMotion.runLR(speed, speed); break;
        case 0b0010: LbMotion.runLR(speed, speed_3); break;
        case 0b0011: LbMotion.runLR(speed, speed_2); break;
        case 0b0001: LbMotion.runLR(speed, speed_0); break;
        case 0b0100: LbMotion.runLR(speed_3, speed); break;
        case 0b1100: LbMotion.runLR(speed_2, speed); break;
        case 0b1000: LbMotion.runLR(speed_0, speed); break;
        case 0b1111: LbMotion.stopAndWait(); break;
    }
}

void TurnLeft(int speed, int angle) {
    LbMotion.runLR(-speed, +speed);
    LbMotion.waitRotation(angle);
    LbMotion.stopAndWait();
    LbDelay(time_delay);
}

void TurnRight(int speed, int angle) {
    LbMotion.runLR(+speed, -speed);
    LbMotion.waitRotation(angle);
    LbMotion.stopAndWait();
    LbDelay(time_delay);
}

void moveForward(int speed, int distance) {
    LbMotion.runLR(speed, speed);
    LbMotion.waitDistanceMm(distance);
    LbMotion.stopAndWait();
}

void moveBackWard(int speed, int distance) {
    LbMotion.runLR(-speed, -speed);
    LbMotion.waitDistanceMm(distance);
    LbMotion.stopAndWait();
}

bool isObjectDetected() {
    int distance = LbDistance.read();
    return distance > 0 && distance < DISTANCE_THRESHOLD;
}

// === HÀM ĐIỀU KHIỂN GẮP VẬT === //
void Grip(int time_angle) {
    for (int i = 0; i <= 90; i += 10) {
        LbGripper.moveToLR(i, i, time_angle);
        LbDelay(15);
    }
    LbMotion.stopAndWait();
    LbDelay(time_delay);
}

void GripBreak(int time_angle) {
    for (int i = 90; i >= 0; i -= 10) {
        LbGripper.moveToLR(i, i, time_angle);
        LbDelay(15);
    }
    LbMotion.stopAndWait();
    LbDelay(time_delay);
}

class cLbColorDetector {
  private:
    int objRed, objGreen, objBlue;
  
  public:
    void detect();
    void printRGB();
    String getColor();
};

void cLbColorDetector::detect() {
  int originalBrightness = LbRGB.getBrightness();
  LbRGB.setBrightness(255);

  int rr, gg, bb;

  LbRGB.fillColor(0xFF00FF);
  LbRGB.show();
  while(APDS.colorAvailable() == 0);
  APDS.readColor(rr, gg, bb);
  int r1 = rr;
  int b1 = bb;

  LbRGB.fillColor(0X00FF00);
  LbRGB.show();
  while(APDS.colorAvailable() == 0);
  APDS.readColor(rr, gg, bb);
  int g1 = gg;

  LbRGB.fillColor(0x000000);
  LbRGB.show();
  while (APDS.colorAvailable() == 0);
  APDS.readColor(rr, gg, bb);

  objRed   = (r1 - rr) * 2;
  objGreen = (g1 - gg) * 2;
  objBlue  = (b1 - bb) * 1;

  LbRGB.setBrightness(originalBrightness);
  LbDelay(100);
}

void cLbColorDetector::printRGB() {
  Serial.print("RGB: ");
  Serial.print(objRed);
  Serial.print(" ");
  Serial.print(objGreen);
  Serial.print(" ");
  Serial.print(objBlue);
  Serial.println();
}

String cLbColorDetector::getColor() {
  if(objRed > objGreen && objRed > objBlue && objRed > 80) {
    return "RED";
  }
  else if(objGreen > objRed && objGreen > objBlue && objGreen > 80) {
    return "GREEN";
  }
  else if (objRed < 30 && objGreen < 30 && objBlue < 30) {
    return "NO OBJECT";
  }
  return "UNKNOWN";
}

cLbColorDetector LbColorDetector;

int currentAngle = 0;

void moveToBranch(int targetAngle) {
  int angleDiff = targetAngle - currentAngle;

  if (angleDiff < 0) {
    TurnRight(speed_turn, angleDiff);
  } 
  else if (angleDiff > 0) {
    TurnLeft(speed_turn, -angleDiff);
  }
  while (true) {
    followLine(speed_go);

    byte line = LbIRLine.read(threshold);
    if (line == 0b1111) {  // Gặp vùng trắng (cuối vạch)
      Serial.println("Đến cuối vạch, dừng lại!");
      break;
    }

    if (line == 0b1001 || line == 0b0110) {  // Ngã rẽ trái/phải
      Serial.println("Phát hiện ngã rẽ!");
      break;
    }
  }
  currentAngle = targetAngle;
}

void returnToCenter() {
  moveBackWard(speed_go, TRANSFER_DISTANCE);
  TurnLeft(speed_turn, currentAngle);
  currentAngle = 0;
  while (true) {
    followLine(speed_go);
        
    byte line = LbIRLine.read(threshold);
    if (line != 0b0000) {
      Serial.println("Đã tìm thấy vạch trung tâm!");
      break;
    }
  }
}

bool branch[6] = {false, false, false, false, false, false};

void process(int angle, String ColorBar) {
  moveToBranch(angle);

  if (!isObjectDetected()) {
    Serial.println("Không có vật thể ở vị trí này.");
    returnToCenter();
    return;
  }

  LbColorDetector.detect();
  String color = LbColorDetector.getColor();

  if (color == ColorBar) {
    Serial.println("Thanh gỗ đã đúng vị trí.");
    branch[(angle + 60) / 30 + 1] = true;
  } 
  else {
    Serial.println("Nhấc thanh gỗ lên.");
    Grip(500);
    branch[(angle + 60) / 30 + 1] = false;
    returnToCenter();

    if ((angle == 30 || angle == 60) && color == "GREEN") {
      int targetBranch = -1;
      if (!branch[1]) targetBranch = -60;
      else if (!branch[2]) targetBranch = -30;

      if (targetBranch != -1) {
        Serial.println("Di chuyển cọc xanh về nhánh trống.");
        moveToBranch(targetBranch);
        GripBreak(500);
        returnToCenter();
        branch[(targetBranch + 60) / 30 + 1] = true;
      } 
      else {
        Serial.println("Không có nhánh trống để đặt cọc.");
      }
    } 
    else {
      Serial.println("Di chuyển thanh gỗ đến vị trí trung chuyển.");
      moveToBranch(0);
      GripBreak(500);
      returnToCenter();
      }
  }
}

void setup() {
  Leanbot.begin();
  Serial.begin(9600);
  if (!APDS.begin()) while (1);
}

void loop() {
    Serial.println("Nhấn nút để bắt đầu...");
    while (LbTouch.read(TB1A) == 0);  // Chờ khi nhấn nút

    Serial.println("Bắt đầu nhiệm vụ...");
    process(-60, "GREEN");
    process(-30, "GREEN");
    process(+30, "RED");
    process(+60, "RED");

    Serial.println("Hoàn thành nhiệm vụ. Nhấn nút để chạy lại.");
    while (LbTouch.read(TB1A) == 1);  // Chờ nhả nút ra trước khi bắt đầu lại
}
